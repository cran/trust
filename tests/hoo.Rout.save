
R version 2.6.2 (2008-02-08)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
>  library(trust)
> 
>  d <- 5
>  mu <- seq(1:d)
> 
>  objfun <- function(x) {
+      stopifnot(is.numeric(x))
+      stopifnot(length(x) == d)
+      normxsq <- sum(x^2)
+      omnormxsq <- 1 - normxsq
+      if (normxsq >= 1) return(list(value = Inf))
+      f <- sum(x * mu) - log(omnormxsq)
+      g <- mu + 2 * x / omnormxsq
+      B <- 4 * outer(x, x) / omnormxsq^2 + 2 * diag(d) / omnormxsq
+      list(value = f, gradient = g, hessian = B)
+  }
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  whoop$gradient
[1] -1.078699e-10 -2.157399e-10 -3.236096e-10 -4.314797e-10 -5.393499e-10
>  length(whoop$r)
[1] 11
>  data.frame(type = whoop$steptype, rho = whoop$rho, change = whoop$preddiff,
+      accept = whoop$accept, r = whoop$r)
        type        rho        change accept      r
1  easy-easy       -Inf -6.416198e+00  FALSE 1.0000
2  easy-easy  0.9988621 -1.791550e+00   TRUE 0.2500
3  easy-easy  0.9384396 -3.139210e+00   TRUE 0.5000
4     Newton -3.7556923 -4.869739e-01  FALSE 1.0000
5     Newton -3.7556923 -4.869739e-01  FALSE 0.2500
6  easy-easy  0.9704734 -2.173391e-01   TRUE 0.0625
7     Newton  0.4808668 -1.207191e-01   TRUE 0.1250
8     Newton  1.1345590 -2.842948e-02   TRUE 0.1250
9     Newton  1.0359753 -1.601421e-03   TRUE 0.1250
10    Newton  1.0021017 -5.063150e-06   TRUE 0.1250
11    Newton  0.9999978 -5.055701e-11   TRUE 0.1250
> 
>  whoop$argument
[1] -0.1178785 -0.2357569 -0.3536354 -0.4715138 -0.5893923
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.1257900
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1.0000000 0.9999999 1.0000005
> 
>  mu <- 10 * mu
> 
>  whoop <- trust(objfun, rep(0, d), 1, 100, blather = TRUE)
>  whoop$converged
[1] TRUE
>  whoop$gradient
[1] -3.518963e-12 -7.037926e-12 -1.056222e-11 -1.407585e-11 -1.760014e-11
>  length(whoop$r)
[1] 15
>  data.frame(type = whoop$steptype, rho = whoop$rho, change = whoop$preddiff,
+      accept = whoop$accept, r = whoop$r)
        type        rho        change accept        r
1  easy-easy       -Inf -7.316198e+01  FALSE 1.000000
2  easy-easy  0.9998897 -1.847800e+01   TRUE 0.250000
3  easy-easy  0.9947072 -3.651210e+01   TRUE 0.500000
4  easy-easy       -Inf -6.257014e+01  FALSE 1.000000
5  easy-easy -0.3251657 -1.717315e+01  FALSE 0.250000
6  easy-easy  0.9985379 -4.388951e+00   TRUE 0.062500
7  easy-easy  0.9751869 -8.447947e+00   TRUE 0.125000
8     Newton       -Inf -6.717855e+00  FALSE 0.250000
9  easy-easy -4.4815250 -3.166862e+00  FALSE 0.062500
10 easy-easy  0.9927369 -8.855630e-01   TRUE 0.015625
11 easy-easy  0.8548179 -1.444545e+00   TRUE 0.031250
12    Newton  0.8728750 -1.388610e-02   TRUE 0.062500
13    Newton  1.0181349 -3.855828e-04   TRUE 0.062500
14    Newton  1.0005138 -2.973090e-07   TRUE 0.062500
15    Newton  1.0451457 -1.767611e-13   TRUE 0.062500
> 
>  whoop$argument
[1] -0.1330340 -0.2660681 -0.3991021 -0.5321362 -0.6651702
>  1 - sqrt(sum(whoop$argument^2))
[1] 0.01339309
>  (whoop$stepnorm / whoop$r)[whoop$accept & whoop$steptype != "Newton"]
[1] 1 1 1 1 1 1
> 
>  try(whoop <- trust(objfun, rep(0.5, d), 1, 100, blather = TRUE))
Error in trust(objfun, rep(0.5, d), 1, 100, blather = TRUE) : 
  parinit not feasible
> 
> 
